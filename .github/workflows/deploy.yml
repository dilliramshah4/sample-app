name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t drviki-app .
    
    - name: Run container for testing
      run: |
        docker run -d -p 8080:8080 --name test-container drviki-app
        sleep 10
    
    - name: Test application
      run: |
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
    
    - name: Stop test container
      run: docker stop test-container && docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t drviki-app .
    
    - name: Run Trivy vulnerability scanner
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --exit-code 0 --format table drviki-app

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t drviki-app .
    
    - name: Deploy to Azure VM
      env:
        AZURE_VM_HOST: ${{ secrets.AZURE_VM_HOST }}
        AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
        AZURE_VM_KEY: ${{ secrets.AZURE_VM_PRIVATE_KEY }}
        GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
      run: |
        echo "Setting up SSH key"
        echo "$AZURE_VM_KEY" > azure_key.pem
        chmod 600 azure_key.pem
        
        echo "Creating directory and copying files to Azure VM"
        ssh -i azure_key.pem -o StrictHostKeyChecking=no $AZURE_VM_USER@$AZURE_VM_HOST "mkdir -p ~/drviki-app"
        scp -i azure_key.pem -o StrictHostKeyChecking=no -r * $AZURE_VM_USER@$AZURE_VM_HOST:~/drviki-app/
        
        echo "Deploying complete stack (App + Monitoring)"
        ssh -i azure_key.pem -o StrictHostKeyChecking=no $AZURE_VM_USER@$AZURE_VM_HOST << EOF
          cd ~/drviki-app
          
          # Stop existing containers
          docker-compose -f docker-compose.monitoring.yml down 2>/dev/null || true
          
          # Set environment variable for Grafana password
          export GRAFANA_PASSWORD=$GRAFANA_PASSWORD
          
          # Deploy complete monitoring stack
          docker-compose -f docker-compose.monitoring.yml up -d
          
          # Wait for services to start
          sleep 30
          
          # Verify deployment
          echo "Checking service status:"
          docker-compose -f docker-compose.monitoring.yml ps
          
          echo "App URL: http://$AZURE_VM_HOST:8080"
          echo "Grafana URL: http://$AZURE_VM_HOST:3000 (admin/\$GRAFANA_PASSWORD)"
          echo "Prometheus URL: http://$AZURE_VM_HOST:9090"
        EOF
